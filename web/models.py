from django.db import models
from django.db.models.signals import pre_save
import json
import logging
logger = logging.getLogger(__name__)

class ClusterData(models.Model):
    # Clusters generated by machine learning app (ie mahout)
    date = models.DateField()
    range = models.PositiveIntegerField()
    created_at = models.DateTimeField()
    ml_json = models.TextField()
    # set in pre-save
    d3_dendogram_json = models.TextField()
    num_clusters = models.PositiveIntegerField()

    def __unicode__(self):
        return "<date(%s) range(%s) numclusters(%s)>"%(self.date, self.range, self.num_clusters)

    class Meta:
        unique_together = ('date', 'range')

class BibleText(models.Model):
    translation = models.CharField(max_length=64, blank=False, null=False)
    bibleverse = models.CharField(max_length=64, blank=False, null=False)
    verse_id = models.PositiveIntegerField()
    text = models.TextField(blank=False, null=False)

    def __unicode__(self):
        return "<bibleverse(%s) translation(%s)>"%(self.bibleverse, self.translation)

def make_d3_data(instance):
    d3_data = {"name": "",
               "date":instance.date.strftime("%Y-%m-%d"),
               "range":instance.range}

    d3_data['children'] = []
    clusters = json.loads(instance.ml_json)
    facets = {}

    # child for every cluster
    for cluster in clusters:
        if not len(cluster.get('top_terms')):
            logger.error("found an empty cluster")
            continue


        # child for "bibleverses"
        num = len(cluster["top_terms"])
        d3_cluster = {"size":num,
                      "bibleverse": cluster["top_terms"][0]["term"],
                      "name": cluster["top_terms"][0]["term"],
                      "children":[{"name":t['term'], "bibleverse": t["term"], "children":[]} for t in cluster["top_terms"]]}

                  
        d3_data["children"].append(d3_cluster)

        for t in cluster["top_terms"]:
            t = t['term']
            facets[t] = facets.get(t,0)
            facets[t]+=1
    facets = [{'term':key, 'count':facets[key]} for key in facets]
    d3_data['facets'] = sorted(facets, key=lambda x: x.values()[0], reverse=True)

    return d3_data

def pre_save_d3_data(sender, instance, *args, **kwargs):
    if instance.d3_dendogram_json:
        return instance.d3_dendogram_json

    d3_data = make_d3_data(instance)
    instance.d3_dendogram_json = json.dumps(d3_data, indent=2)
    instance.num_clusters = len(d3_data["children"])

# TODO: Does this fire on update?
pre_save.connect(pre_save_d3_data, sender=ClusterData)
